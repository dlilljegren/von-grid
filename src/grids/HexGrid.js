import * as THREE from './../../lib/three.module.js';
import {Coord} from './Coord.js'; 
import {Cell} from './Cell.js'; 
import {Tile} from './Tile.js'; 
import {AbstractGrid} from './AbstractGrid.js'; 
import {vg} from '../vg.js'


/*
	Graph of hexagons. Handles grid cell management (placement math for eg pathfinding, range, etc) and grid conversion math.
	[Cube/axial coordinate system](http://www.redblobgames.com/grids/hexagons/), "flat top" version only. Since this is 3D, just rotate your camera for pointy top maps.
	Interface:
	type
	size - number of cells (in radius); only used if the map is generated
	cellSize
	cells - a hash so we can have sparse maps
	numCells
	extrudeSettings
	autogenerated
	cellShape
	cellGeo
	cellShapeGeo

	@author Corey Birnbaum https://github.com/vonWolfehaus/ 
	@author David Lilljegren
 */
// 'utils/Loader', 'graphs/Hex', 'utils/Tools'
export class HexGrid extends AbstractGrid{
	
	
	constructor(config) {
		super(config);
		config = config || {};
		/*  ______________________________________________
			GRID INTERFACE:
		*/
		this.type = vg.HEX;	
	
		
		
		

		this.extrudeSettings = null;
		this.autogenerated = false;

		// create base shape used for building geometry
		var i, verts = [];
		// create the skeleton of the hex
		for (i = 0; i < 6; i++) {
			verts.push(this._createVertex(i));
		}
		// copy the verts into a shape for the geometry to use
		this.cellShape = new THREE.Shape();
		this.cellShape.moveTo(verts[0].x, verts[0].y);
		for (i = 1; i < 6; i++) {
			this.cellShape.lineTo(verts[i].x, verts[i].y);
		}
		this.cellShape.lineTo(verts[0].x, verts[0].y);
		this.cellShape.autoClose = true;

		this.cellGeo = new THREE.Geometry();//Is this really used
		this.cellGeo.vertices = verts;
		this.cellGeo.verticesNeedUpdate = true;

		this.cellShapeGeo = new THREE.ShapeGeometry(this.cellShape);

		/*  ______________________________________________
			PRIVATE
		*/

		this._cellWidth = this.cellSize * 2;
		this._cellLength = (vg.SQRT3 * 0.5) * this._cellWidth;
	
		// pre-computed permutations
		this._directions = [Coord.QRS(+1, -1, 0), Coord.QRS(+1, 0, -1), Coord.QRS(0, +1, -1),
			Coord.QRS(-1, +1, 0), Coord.QRS(-1, 0, +1), Coord.QRS(0, -1, +1)];
		this._diagonals = [Coord.QRS(+2, -1, -1), Coord.QRS(+1, +1, -2), Coord.QRS(-1, +2, -1),
			Coord.QRS(-2, +1, +1), Coord.QRS(-1, -1, +2), Coord.QRS(+1, -2, +1)];
		// cached objects
		this._list = [];
		
		
		this._conversionVec = new THREE.Vector3();
		this._geoCache = [];
	}


	/*  ________________________________________________________________________
		High-level functions that the Board interfaces with (all grids implement)
	 */

	// grid cell (Hex in cube coordinate space) to position in pixels/world
	coordToPixel(coord) {
		this._vec3.x = coord.q * this._cellWidth * 0.75;
		this._vec3.y = coord.t*this.cellHeight;
		this._vec3.z = -((coord.s - coord.r) * this._cellLength * 0.5);
		return this._vec3;
	}

	pixelToCoord(pos) {
		// convert a position in world space ("pixels") to cell coordinates
		var q = pos.x * (vg.TWO_THIRDS / this.cellSize);
		var r = ((-pos.x / 3) + (vg.SQRT3/3) * pos.z) / this.cellSize;
		var t = pos.y;
		this._coord.set(q, r, -q-r,t);
		return this._cubeRound(this._coord);
	}

	getCellAt(pos) {
		// get the Cell (if any) at the passed world position
		var q = pos.x * (vg.TWO_THIRDS / this.cellSize);
		var r = ((-pos.x / 3) + (vg.SQRT3/3) * pos.z) / this.cellSize;
		var t = pos.y;
		this._coord.set(q, r, -q-r,t);
		this._cubeRound(this._coord);
		return this.cells[this.cellToHash(this._coord)];
	}



	getNeighbors(cell, diagonal, filter) {
		// always returns an array
		var i, n, l = this._directions.length;
		this._list.length = 0;
		for (i = 0; i < l; i++) {
			this._coord.copy(cell.coord);
			this._coord.add(this._directions[i]);
			n = this.cells.get(this.coordToHash(this._coord));
			if (!n || (filter && !filter(cell, n))) {
				continue;
			}
			this._list.push(n);
		}
		if (diagonal) {
			for (i = 0; i < l; i++) {
				this._coord.copy(cell);
				this._coord.add(this._diagonals[i]);
				n = this.cells.get(this.cellToHash(this._coord));
				if (!n || (filter && !filter(cell, n))) {
					continue;
				}
				this._list.push(n);
			}
		}
		//ToDo add neighbours below and on top
		return this._list;
	}

	

	coordToHash(cell) {
		return cell.q+this._hashDelimeter+cell.r+this._hashDelimeter+cell.t;
	}

	distance(cellA, cellB) {
		var d = Math.max(Math.abs(cellA.q - cellB.q), Math.abs(cellA.r - cellB.r), Math.abs(cellA.s - cellB.s));
		d += cellB.h - cellA.h; // include vertical height
		return d;
	}

	clearPath() {		
		for (const c of this.cells.values()) {			
			c._calcCost = 0;
			c._priority = 0;
			c._parent = null;
			c._visited = false;
		}
	}
	
	generateTile(cell, scale, material) {
		var height = this.cellHeight;

		var geo = this._geoCache[height];
		if (!geo) {
			//Move to constructor
			this.extrudeSettings.amount = height;
			geo = new THREE.ExtrudeGeometry(this.cellShape, this.extrudeSettings);
			this._geoCache[height] = geo;
		}

		var tile = new Tile({
			size: this.cellSize,
			scale: scale,
			cell: cell,
			geometry: geo,
			material: material
		});
		cell.tile = tile;
		return tile;
	}

	generateTiles(config) {
		config = config || {};
		var tiles = [];
		var settings = {
			tileScale: 0.95,
			cellSize: this.cellSize,
			material: null,
			extrudeSettings: {
				amount: 1,
				bevelEnabled: true,
				bevelSegments: 1,
				steps: 1,
				bevelSize: 0.5,
				bevelThickness: 0.5
			}
		}
		settings = Tools.merge(settings, config);

		/*if (!settings.material) {
			settings.material = new THREE.MeshPhongMaterial({
				color: vg.Tools.randomizeRGB('30, 30, 30', 10)
			});
		}*/

		// overwrite with any new dimensions
		this.cellSize = settings.cellSize;
		this._cellWidth = this.cellSize * 2;
		this._cellLength = (vg.SQRT3 * 0.5) * this._cellWidth;

		this.autogenerated = true;
		this.extrudeSettings = settings.extrudeSettings;

		var i, t, c;
		for (i in this.cells) {
			c = this.cells[i];
			t = this.generateTile(c, settings.tileScale, settings.material);
			t.position.copy(this.cellToPixel(c));
			t.position.y = 0;
			tiles.push(t);
		}
		return tiles;
	}

	cube_to_oddq(cubeCoord){
		var col = cubeCoord.q;
		var row = cubeCoord.s + (cubeCoord.q - (cubeCoord.q&1)) / 2
		return {col:col,row:row}; 
	}

	oddq_to_cube(hex){
		x = hex.col
		z = hex.row - (hex.col - (hex.col&1)) / 2
		y = -x-z
		return {q:x,r:y,s:z,t:0};
	}
	

	

	dispose() {
		super.dispose();
		
		this.cellShape = null;
		this.cellGeo.dispose();
		this.cellGeo = null;
		this.cellShapeGeo.dispose();
		this.cellShapeGeo = null;
		this._list = null;
		this._vec3 = null;
		this._conversionVec = null;
		this._geoCache = null;
		this._matCache = null;
	}

	/*
		Load a grid from a parsed json object.
		json = {
			extrudeSettings,
			size,
			cellSize,
			autogenerated,
			cells: [],
			materials: [
				{
					cache_id: 0,
					type: 'MeshLambertMaterial',
					color, ambient, emissive, reflectivity, refractionRatio, wrapAround,
					imgURL: url
				},
				{
					cacheId: 1, ...
				}
				...
			]
		}
	*/
	load(url, cb, scope) {
		var self = this;
		vg.Tools.getJSON({
			url: url,
			callback: function(json) {
				self.fromJSON(json);
				cb.call(scope || null, json);
			},
			cache: false,
			scope: self
		});
	}

	fromJSON(json) {
		var i, c;
		var cells = json.cells;

		this.cells = {};
		this.numCells = 0;

		this.size = json.size;
		this.cellSize = json.cellSize;
		this._cellWidth = this.cellSize * 2;
		this._cellLength = (vg.SQRT3 * 0.5) * this._cellWidth;

		this.extrudeSettings = json.extrudeSettings;
		this.autogenerated = json.autogenerated;

		for (i = 0; i < cells.length; i++) {
			c = new vg.Cell();
			c.copy(cells[i]);
			this.add(c);
		}
	}

	toJSON() {
		var json = {
			size: this.size,
			cellSize: this.cellSize,
			extrudeSettings: this.extrudeSettings,
			autogenerated: this.autogenerated
		};
		var cells = [];
		var c, k;

		for (k in this.cells) {
			c = this.cells[k];
			cells.push({
				q: c.q,
				r: c.r,
				s: c.s,
				h: c.h,
				walkable: c.walkable,
				userData: c.userData
			});
		}
		json.cells = cells;

		return json;
	}

	/*  ________________________________________________________________________
		Hexagon-specific conversion math
		Mostly commented out because they're inlined whenever possible to increase performance.
		They're still here for reference.
	 */

	_createVertex(i) {
		var angle = (vg.TAU / 6) * i;
		return new THREE.Vector3((this.cellSize * Math.cos(angle)), (this.cellSize * Math.sin(angle)), 0);
	}

	/*_pixelToAxial: function(pos) {
		var q, r; // = x, y
		q = pos.x * ((2/3) / this.cellSize);
		r = ((-pos.x / 3) + (vg.SQRT3/3) * pos.y) / this.cellSize;
		this._cel.set(q, r, -q-r);
		return this._cubeRound(this._cel);
	},*/

	/*_axialToCube: function(h) {
		return {
			q: h.q,
			r: h.r,
			s: -h.q - h.r
		};
	},*/

	/*_cubeToAxial: function(cell) {
		return cell; // yep
	},*/

	/*_axialToPixel: function(cell) {
		var x, y; // = q, r
		x = cell.q * this._cellWidth * 0.75;
		y = (cell.s - cell.r) * this._cellLength * 0.5;
		return {x: x, y: -y};
	},*/

	/*_hexToPixel: function(h) {
		var x, y; // = q, r
		x = this.cellSize * 1.5 * h.x;
		y = this.cellSize * vg.SQRT3 * (h.y + (h.x * 0.5));
		return {x: x, y: y};
	},*/

	/*_axialRound: function(h) {
		return this._cubeRound(this.axialToCube(h));
	},*/

	_cubeRound(h) {
		var rx = Math.round(h.q);
		var ry = Math.round(h.r);
		var rz = Math.round(h.s);

		var xDiff = Math.abs(rx - h.q);
		var yDiff = Math.abs(ry - h.r);
		var zDiff = Math.abs(rz - h.s);

		if (xDiff > yDiff && xDiff > zDiff) {
			rx = -ry-rz;
		}
		else if (yDiff > zDiff) {
			ry = -rx-rz;
		}
		else {
			rz = -rx-ry;
		}

		return this._cel.set(rx, ry, rz);
	}

	/*_cubeDistance: function(a, b) {
		return Math.max(Math.abs(a.q - b.q), Math.abs(a.r - b.r), Math.abs(a.s - b.s));
	}*/
}



